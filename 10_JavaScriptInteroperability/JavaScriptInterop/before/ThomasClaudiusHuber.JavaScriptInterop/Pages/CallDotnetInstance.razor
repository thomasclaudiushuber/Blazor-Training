@page "/calldotnetinstance"
@inject IJSRuntime JSRuntime

<h3>Call .NET instance method from JS</h3>

<p>Window size received from JavaScript (Resize the Window to see it in action): </p>
<p>@windowSize.Width x @windowSize.Height</p>

@code {
  System.Drawing.Size windowSize;
  protected async override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      // TODO: 7. Instead of passing null to the registerSizeChangedHandler JavaScript method,
      //          pass a DotNetObjectReference that points to this component

      await JSRuntime.InvokeVoidAsync("blazorJsInterop.registerSizeChangedHandler", null);
    }
  }

  // TODO: 8. Look at the blazorJsInterop.registerSizeChangedHandler in the wwwroot/scripts/callDotnet.js file
  //          and note that calls the SetWindowsSize method below defined in this component

  // TODO: 9. Make the SetWindowSize method visible for JavaScript by adding the JsInvokable attribute to it

  public void SetWindowSize(System.Drawing.Size size)
  {
    this.windowSize = size;

    // TODO: 10. Run the application, navigate to this component and change the browser window size.
    //           Note that the application does not display the changed size.
    //           Add a breakpoint here to verify that this method gets called, and you'll find out that it gets called

    // TODO: 11. The windowSize is set from JavaScript, so Blazor does not know that it has to re-render this component
    //           Call here the StateHasChanged() method to tell Blazor that it should render this component again        
    
    // TODO: 12. Run the application again, navigate to this component, resize the browser window,
    //           and now the displayed windowSize in this component is updated when you do that.
  }
}
