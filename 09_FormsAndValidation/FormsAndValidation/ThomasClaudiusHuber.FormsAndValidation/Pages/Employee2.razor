@page "/employee2"
@implements IDisposable

<h3>Employee2 - using Edit Context to disable save button</h3>

<EditForm EditContext="@editContext">
  <DataAnnotationsValidator />

  <p>
    <label for="firstname">Firstname (required, max 20 characters): </label>
    <CustomInputText id="firstname" class="form-control" @bind-Value="employee.FirstName"/>
    <ValidationMessage For="()=>employee.FirstName" />
  </p>

  <p>
    <label for="email">Email (optional): </label>
    <InputText id="email" class="form-control" @bind-Value="employee.Email" />
    <ValidationMessage For="()=>employee.Email" />
  </p>

  <p>
    <label for="jobRole">Job Role (required): </label>
    <InputSelect id="jobRole" class="form-control" @bind-Value="employee.JobRole">
      <option value="">Select a Job role</option>
      <option value="dev">Software Developer</option>
      <option value="admin">Administrator</option>
      <option value="mcspecialist">Marketing specialist</option>
    </InputSelect>
    <ValidationMessage For="()=>employee.JobRole" />
  </p>

  <p>
    <label for="jobentrydate">Job Entry Date (required): </label>
    <InputDate id="jobentrydate" class="form-control" @bind-Value="employee.JobEntryDate" />
    <ValidationMessage For="()=>employee.JobEntryDate" />
  </p>

  <p>
    <label for="blazorskilllevel">Blazor skill level (required, between 0 and 10): </label>
    <InputNumber id="blazorskilllevel" class="form-control" @bind-Value="employee.BlazorSkillLevel" />
    <ValidationMessage For="()=>employee.BlazorSkillLevel" />
  </p>

  <button class="btn btn-primary" type="submit" disabled="@formInvalid">Submit</button>

  <ValidationSummary />
</EditForm>

@code {
  bool formInvalid = true;
  private EditContext editContext;
  private Employee employee;

  protected override Task OnInitializedAsync()
  {
    // Here you could load the employee via Http Service
    employee = new Employee { JobEntryDate = DateTime.Now.Date };

    editContext = new EditContext(employee);
    editContext.OnFieldChanged += HandleFieldChanged;
    return Task.CompletedTask;
  }

  private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
  {
    formInvalid = !editContext.Validate();
    StateHasChanged();
  }

  public void Dispose()
  {
    editContext.OnFieldChanged -= HandleFieldChanged;
  }

  private void HandleValidSubmit()
  {
    // Here you could save the employee via Http Service

    Console.WriteLine($"Save employee {employee.FirstName}");
  }
}
